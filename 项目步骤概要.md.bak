# 项目步骤

## 目录

### 前台相关

[项目前端基础开发环境搭建](#jump1)

[制作博客公用头部并形成组件](#jump2)

[完成首页主体的两栏布局](#jump3)

[利用List组件 制作博客列表](#jump4)

[编写“博主介绍”组件](#jump5)

[编写“通用广告”组件](#jump6)

[博客底部的制作](#jump7)

[博客List页的制作](#jump8)

[博客详细页面制作](#jump9)

### 中台相关

[中台搭建1-安装egg.js开发环境](#jump10)

[中台搭建2-RESTful API设计简介和路由配置](#jump11)

[中台搭建3-Egg.js中连接mysql数据库](#jump12)

[中台搭建4-数据库设计和首页接口制作](#jump13)

[前中台结合1-前台读取首页文章列表接口](#jump14)

[前中台结合2-文章详细页面接口制作展示](#jump15)

[解决egg.js的跨域问题](#jump16)

[前台文章列表页的制作1-接口模块化和读取文章分类](#jump17)

[前台文章列表页的制作2-根据类别读取文章列表](#jump18)

[让前台所有页面支持Markdown解析](#jump19)

## 后台相关

[后台开发01-开发环境搭建](#jump20)

[后台开发02-页面路由配置](#jump21)

[后台管理系统开发03-编写登录界面](#jump22)

[后台开发04-UI框架搭建](#jump23)

[后台开发05-添加文章页面制作1](#jump24)

[后台开发06-添加文章页面制作2](#jump25)

[后台管理系统开发07-为文章内容和文章简介添加Markdown解析](#jump26)

[后台开发08-编写service登录接口](#jump27)

[后台开发09-实现前台登录操作](#jump28)

[](#jump)

---	

<span id="jump1"></span>

## 项目前端基础开发环境搭建

### 用create-next-app快速创建项目

1. 全局安装create-next-app：

```shell
cnpm install -g create-next-app
```

2. 使用脚手架创建项目：

```shell
npx create-next-app blog
```

3. 删除index.js中的多余内容，仅保留：


### 让Next支持CSS文件

1. 安装@zeit/next-css包

```shell
cnpm i -S @zeit/next-css
```

2. 在blog根目录下，新建一个next.config.js文件

### 按需加载Ant Design

1. 安装antd

```shell
cnpm i -S antd@3.23.3
```

2. 再安装一下babel-plugin-import

```shell
cnpm i -S babel-plugin-import
```

3. 在blog根目录下建立.babelrc文件

4. 在pages目录下，新建一个_app.js文件

---

<span id="jump2"></span>

## 制作博客公用头部并形成组件

### 灰色背景

博客需要一个浅灰背景色，并且每个页面的背景色都是一样的，所以需要一个公共的css样式文件

1. 在/public文件夹下新建一个/style/,在/style文件夹下新建两个文件夹/pages和/components

2. /pages文件夹下新建立comm.css文件，将背景色设为灰色

3. /pages/_app.js引入这个CSS

```javascript
import '../public/style/pages/comm.css'
```

### 制作头部

1. /blog/components/目录下新建一个Header.js文件

2. /public/style/components/目录下新建header.css

3. 把/Header.js文件引入到/blog/pages/index.js，并在< Head >下使用它

---

<span id="jump3"></span>

## 完成首页主体的两栏布局

### 编写首页的左右两列布局

1. /blog/pages/index.js用antd自带的Row和Col组件做左右分栏

2. comm.css添加分栏的样式

### 其他页面的大结构复制

因为博客的列表页、详细页都采用了这种页面的总体形式

所以我们在Pages目录新建list.js和detailed.js文件，然后把index.js代码复制到里边

---

<span id="jump4"></span>

## 利用List组件 制作博客列表

### 编写列表项的基本结构

/blog/pages/index.js中：

1. 引入必要依赖

```javascript
import React,{useState} from 'react'

import {Row, Col , List ,Icon} from 'antd'
```

2. 用useState初始化数据

3. 主体部分左侧分栏添加<List />，内部添加header、itemLayout、dataSource

4. renderItem遍历dataSource展示文章内容

---

<span id="jump5"></span>

## 编写“博主介绍”组件

1. /blog/components下，新建一个Author.js文件

2. 头像

	1. 使用Avatar组件制作头像

	2. 导入图片
	```javascript
	import avaImg from '../public/img/avatar.jpg'
	```

	3. 在Avatar插入图片

	```javascript
        <div> <Avatar size={100} src={avaImg} /></div>
	```

	4. 安装loader以正确读取本地图片

	```shell
	cnpm i -S file-loader url-loader
	```

	5. 配置webpack-config.js

		1. /blog/node_modules下搜索webpack-config.js

		2. 搜索 module:

		3. rules中添加：

		```javascript
		{
		  test: /.(png|jpg|gif|svg)$/,
		  use: ['url-loader']
		},
		```

3. 继续添加个人简介和社交账号

4. 添加author.css样式文件

5. index.js中引入Author组件，在右侧分栏使用它

---

<span id="jump6"></span>

## 编写“通用广告”组件

1. /blog/components下，新建立一个Advert.js文件

2. /blog/public/components下，建立一个advert.css文件

3. /blog/pages/index.js中用import引入Advert组件，在右侧分栏使用它

---

<span id="jump7"></span>

## 博客底部的制作

1. /blog/components下，新建立一个Footer.js的文件

2. /blog/public/style/components下，建立一个footer.css文件

3. 引入到需要的页面

---

<span id="jump8"></span>

## 博客List页的制作

1. 把/blog/pages/index.js的代码，拷贝到list.js页面中

2. 使用Ant Design自带的Breadcrumb制作面包屑导航，插入到左侧分栏最上方

---

<span id="jump9"></span>

## 博客详细页面制作

### 编写基本页面结构

1. /blog/public/style/pages下，建立一个detailed.css文件

2. 完成Detailed组件的return部分


### 使用marked+highlight解析markdown文档

#### 安装marked和highlight

/blog目录下安装

```shell
cnpm i -S marked highlight.js
```

#### 解析markdown格式

1. 引入模块

```javascript
import marked from 'marked'
import hljs from "highlight.js";
import 'highlight.js/styles/monokai-sublime.css';
```

2. 在Detailed中，设置一下marked.setOptions

```javascript
const renderer = new marked.Renderer();

marked.setOptions({
  renderer: renderer,
  gfm: true,
  pedantic: false,
  sanitize: false,
  tables: true,
  breaks: false,
  smartLists: true,
  smartypants: false,
  highlight: function (code) {
    return hljs.highlightAuto(code).value;
  }
});

let html = marked(props.article_content)
```

- renderer: 这个是必须填写的，你可以通过自定义的Renderer渲染出自定义的格式

- gfm：启动类似Github样式的Markdown,填写true或者false

- pedatic：只解析符合Markdown定义的，不修正Markdown的错误。填写true或者false

- sanitize: 原始输出，忽略HTML标签，这个作为一个开发人员，一定要写flase

- tables： 支持Github形式的表格，必须打开gfm选项

- breaks: 支持Github换行符，必须打开gfm选项，填写true或者false

- smartLists：优化列表输出，这个填写ture之后，你的样式会好看很多，所以建议设置成ture

- highlight: 高亮显示规则 ，这里我们将使用highlight.js来完成

3. 展示文章内容

detailed-content的div中展示html

```html
<div className="detailed-content"
  dangerouslySetInnerHTML={{ __html: html }}
>
```

### markdown导航栏的制作

#### 安装tocify.tsx插件

1. 安装lodash

```shell
cnpm i -S lodash
```

2. /blog/components下新建tocify.tsx

#### 使用tocify.tsx生成文章目录

1. 在/blog/pages/detailed.js引入

```javascript
import Tocify from '../components/tocify.tsx'
```

2. Detailed中，写一个方法重新定义对#这种标签的解析

```javascript
const tocify = new Tocify()

renderer.heading = function (text, level, raw) {
  const anchor = tocify.add(text, level);
  return `<a id="${anchor}" href="#${anchor}" class="anchor-fix"><h${level}>${text}</h${level}></a>\n`;
};
```

3. 在nav-title的div中使用tocify

```javascript
<div className="toc-list">
  {tocify && tocify.render()}
</div>
```

---

<span id="jump10"></span>

## 中台搭建1-安装egg.js开发环境

### 搭建开发环境

全局安装egg.js的脚手架工具egg-init：

```shell
cnpm i egg-init -g
```

react项目根目录同级新建一个service文件夹，用脚手架在service夹中自动生成项目的基本结构：

 ```shell
egg-init --type=simple
```

安装egg项目所需要的所有依赖包：

```shell
cnpm install
```

启动服务查看egg环境是否搭建成功:

```shell
npm run dev
```

---

<span id="jump11"></span>

## 中台搭建2-RESTful API设计简介和路由配置

1. service/app/controller下，新建两个文件夹admin（管理端使用的所有API接口）和default（客户端使用的所有API接口）文件夹

2. service/app/controller/default下，建立一个home.js

3. service/app/下新建一个router文件夹，在文件夹下新建两个文件default.js和admin.js，更新router.js

---

<span id="jump12"></span>

## 中台搭建3-Egg.js中连接mysql数据库

### egg-mysql模块安装

安装

```shell
cnpm i egg-mysql --save
```

在/service/config/plugin.js中进行配置

```javascript
'use strict';

//配置插件
exports.mysql = {
  enable: true,
  package: 'egg-mysql'
}
```

### 数据库连接配置

配置/service/config/config.default.js文件，添加config.mysql

---

<span id="jump13"></span>

## 中台搭建4-数据库设计和首页接口制作

### 数据库设计

创建react_blog数据库，建立type和article两张表，表结构如下:

type表（文章类型表）

- id : 类型编号 int类型

- typeName: 文章类型名称 varchar类型

- orderNum: 类型排序编号 int()类型

article表（文章内容表）

- id : 文章编号 int类型

- type_id : 文章类型编号 int类型

- title : 文章标题，varchar类型

- article_content : 文章主体内容，text类型

- introduce： 文章简介，text类型

- addTime : 文章发布时间，int类型

- view_count ：浏览次数， int类型

### 前端首页文章列表接口

1. /service/app/contoller/default/home.js中，写一个getArticleList的方法

2. /service/app/router/default.js中，新建立路径为/default/getArticleList的get形式的路由配置

---

<span id="jump14"></span>

## 前中台结合1-前台读取首页文章列表接口

1. /blog中安装Axios模块，并在 /blog/pages/index.js中导入

2. /blog/pages/index.js中，新建getInitialProps方法并获取到数据reqData

3. 声明Home的地方，将reqData命名为list并作为参数传递给Home内部使用

4. /service/app/controller/default/home.js中，将addTime格式化

---

<span id="jump15"></span>

## 前中台结合2-文章详细页面接口制作展示

1. /service/app/controller/default/home.js中，编写getArticleById接口

2. /service/app/router/default.js中，添加getArticleById的路由配置

3. 为index.js的文章标题列表添加链接，使其能连接到对应的详情页

	1. /blog/pages/index.js中，导入Link

	```javascript
	import Link from 'next/link'
	```
	
	2. 在className="list-title"的div中添加跳转链接

	```javascript
	<div className="list-title">
	  <Link href={{ pathname: '/detailed', query: { id: item.id } }}>
	    <a>{item.title}</a>
	  </Link>
	</div>
	```

4. /blog/pages/detailed.js中，添加Detailed.getInitialProps，根据上一步中传过来的id请求对应文章数据

---

<span id="jump16"></span>

## 解决egg.js的跨域问题

1. /service中安装egg-cors

```shell
cnpm i -S egg-cors
```

2. 配置/service/config/plugin.js文件

```javascript
exports.cors = {
  enable: true,
  package: 'egg-cors'
}
```

3. 配置config.default.js

```javascript
config.security = {
  csrf: {
    enable: false
  },
  domainWhiteList: ['*']
};

config.cors = {
  origin: '*',
  allowMethods: 'GET,HEAD,PUT,POST,DELETE,PATCH,OPTIONS'
};
```

---

<span id="jump"></span17>

## 前台文章列表页的制作1-接口模块化和读取文章分类

### 封装前台的请求地址

1. /blog下新建config文件夹，文件夹内新建apiUrl.js文件

2. /blog/pages/index.js中导入apiUrl.js

3. Home.getInitialProps的axios中修改接口路由

4. /blog/pages/detailed.js中同样进行2、3步操作

### 服务端添加获取文章类型接口

1. /service/app/default/home.js添加getTypeInfo

2. /service/app/router/default.js添加路径为/default/getTypeInfo的路由配置

### 数据库添加Icon字段

因为我们设计的是有Icon的，但是这个数据缺少一个图标选项，现在把图标也存入数据库中

打开mysql的管理，然后在type表里边加入icon字段（vchar）并添加值：

- 视频加上youtube

- 文章加上message

- 休闲娱乐加上smile

### Header.js根据获取到的文章类型，动态显示右上角Menu

以前我们的Header组件是静态的，也就是写死的，现在我们需要利用useEffect()方法来从接口中获取动态数据

1. 导入相关依赖

```javascript
import React ,{useState,useEffect} from 'react'
import Router from 'next/router'
import Link from 'next/link'
import axios from 'axios'
import  servicePath  from '../config/apiUrl'
```

2. 用useState声明navArray和使用useEffect()获取远程数据

3. 添加handleClick方法

4. 为<Menu>添加onClick

5. 遍历navArray动态生成Menu.Item

```javascript
{
  navArray.map((item)=>{
  return(
    <Menu.Item key={item.id}>
      <Icon type={item.icon} />
      {item.typeName}
    </Menu.Item>
  )
  }) 
}
```

6. apiUrl.js的servicePath添加getTypeInfo

---

<span id="jump18"></span>

## 前台文章列表页的制作2-根据类别读取文章列表

### 编写根据类别ID获取文章列表接口

1. /service/app/default/home.js中，添加getListById

2. /service/router/default.js中，添加路径为/default/getListById的路由

3. /blog/config/apiUrl.js中，servicePath中添加getListById

### 编写前台list.js的UI界面

1. /blog/pages/list.js中导入依赖

```javascript
import React,{useState,useEffect} from 'react'
import axios from 'axios'
import Link from 'next/link'
import  servicePath  from '../config/apiUrl'
```

2. /blog/pages/list.js中，添加MyList.getInitialProps请求数据

3. 修改JSX部分：list-title、list-icon、list-contex

---

<span id="jump19"></span>

## 让前台所有页面支持Markdown解析

/blog/pages/index.js执行以下操作

1. 导入相关依赖

```javascript
import marked from 'marked'
import hljs from "highlight.js";
import 'highlight.js/styles/monokai-sublime.css';
```

2. Home中对marked进行setOptions设置

3. 对JSX部分list-context的div进行修改

```javascript
<div className="list-context"
  dangerouslySetInnerHTML={{ __html: marked(item.introduce) }}
></div>
```

4. /blog/public/style/pages/comm.css增加markdown的解析样式

---

<span id="jump20"></span>

## 后台开发01-开发环境搭建

### 用脚手架生成项目

1. 项目根目录下生成目录

```shell
create-react-app admin
```

2. /admin/src目录只留下index.js和App.js文件

### 安装和引入Ant Design

1. 进入/admin文件夹，安装

```shell
cnpm i -S antd@3.23.3
```

2. 在要使用的组件中进行进行导入

```javascript
import { Button } from 'antd';
import 'antd/dist/antd.css';
```

---

<span id="jump21"></span>

## 后台开发02-页面路由配置

### 安装 react-router-dom

进入admin文件夹，安装

```shell
cnpm i -S react-router-dom
```

### 使用Router

1. /admin/src下新建一个pages文件夹，并在Pages中建立一个Main.js文件

2. /admin/src/index.js中，导入Main.js，并render它

3. /admin/src/pages下新建Login.js

---

<span id="jump22"></span>

## 后台管理系统开发03-编写登录界面

### 引入需要使用的组件

```javascript
import React , {useState} from 'react';
import 'antd/dist/antd.css';
import { Card, Input, Icon,Button ,Spin } from 'antd';
```

### 编写UI部分

1. Login()中，定义一些变量和改变变量的方法

```javascript
const [userName , setUserName] = useState('')
const [password , setPassword] = useState('')
const [isLoading, setIsLoading] = useState(false)
```

2. 在return()中，写UI部分

3. Login()中添加checkLogin方法

### 编写CSS文件

1. /admin/src下新建static文件夹，里面再建一个css文件夹

2. 创建Login.css文件，Login.js中导入它

```javascript
import '../static/css/Login.css';
```

---

<span id="jump23"></span>

## 后台开发04-UI框架搭建

### Layout布局

1. /admin/src/pages下新建AdminIndex.js，从antd官网中挑选合适的布局代码复制进来

2. /admin/src/static/css下，新建AdminIndex.css

3. 把Class形式改为Hooks形式

4. /admin/src/pages/Main.js中导入AdminIndex.js，再配置一下路由

---

<span id="jump"></span>

## 后台开发05-添加文章页面制作1

### 创建增加文章页面

1. /admind/src/pages下，新建一个AddArticle.js的文件

2. /admin安装marked

3. /admin/src/static/css下，新建AddArticle.css

4. /admind/src/pages/AdminIndex.js中，导入Route和AddArticle 

5. /admind/src/pages/AdminIndex.js中，主界面的操作内容区域加入路由代码

### 编写AddArticle.js标题和文章内容区域

1. 先把大体架构制作完成，也就是大体分区

```javascript
<div>
  <Row gutter={5}>
      <Col span={18}>
      </Col>
      <Col span={6}>
      </Col>
  </Row>
</div>
```

2. 完善左边栏，添加标题、筛选、文章内容、预览

---

<span id="jump25"></span>

## 后台开发06-添加文章页面制作2

1. 右边栏用Row，再用Col添加暂存按钮和发布按钮

2. 用Col<TextArea>组件编写文章简介部分

3. 用Col做发布时间

---

<span id="jump26"></span>

## 后台管理系统开发07-为文章内容和文章简介添加Markdown解析

1. 声明对应的useState

2. 设置marked：marked.setOptions

3. 编写实时预览对应的方法

4. 添加changeContent和changeIntroduce两个方法

5. classname为markdown-content的TextArea添加onChange和onPressEnter

6. classname为show-html的div添加dangerouslySetInnerHTML

7. 文章简介的TextArea添加onChange和onPressEnter

8. classname为introduce-html的div添加dangerouslySetInnerHTML

---

<span id="jump27"></span>

## 后台开发08-编写service登录接口

1. 在/service/app/controller/admin文件夹下新建一个main.js

2. 在/service/app/router文件夹下，新建立一个admin.js文件

3. /service/app/router.js中require admin

4. 在/service/app/controller/admin/main.js文件里编写验证登录的方法

5. 数据库添加admin_user表，表中新建userName、passWord字段

---

<span id="jump28"></span>

## 后台开发09-实现前台登录操作

### 设置路由

1. /service/app/router/admin.js添加路径为/admin/checkOpenId的post请求

2. /admin新建config文件夹，里面添加apiUrl.js文件

### 后台登录方法编写checkLogin

1. /admin/src/pages/Login.js导入依赖，安装axios

```javascript
import axios from 'axios'

import servicePath from '../config/apiUrl'
```

2. 完善checkLogin方法

3. /service/config/config.default.js的config.cors中，添加credentials，解决跨域问题

